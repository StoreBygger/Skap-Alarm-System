#ifndef abcbitmap
#define abcbitmap

#include <avr/io.h>
#include <avr/pgmspace.h>







#define ABC_CHAR_SIZE 7
#define abc_CHAR_SIZE 7
#define NUM_CHAR_SIZE 5
#define SPECIAL_CHAR_SIZE 8

#define ABC_MAP_SIZE 29
#define abc_MAP_SIZE 29
#define NUM_MAP_SIZE 10
#define SPECIAL_MAP_SIZE 26

const uint8_t ABC[29][7] PROGMEM  ={
	{
		0b01110000, //A
		0b00011100,
		0b00010010,
		0b00011100,
		0b01110000,
		0b10000001
	},
	{
		0b01111110, //B
		0b01001010,
		0b00110100,
		0b10000001
	},
	{
		0b00111100, //C
		0b01000010,
		0b01000010,
		0b00100100,
		0b10000001
	},
	{
		0b01111110, //D
		0b01000010,
		0b00111100,
		0b10000001
	},
	{
		0b01111110, //E
		0b01001010,
		0b01001010,
		0b10000001
	},
	{
		0b01111110, //F
		0b00001010,
		0b00001010,
		0b10000001
	},
	{
		0b00111100, //G
		0b01000010,
		0b00101010,
		0b01111010,
		0b10000001
	},
	{
		0b01111110, //H
		0b00001000,
		0b00001000,
		0b01111110,
		0b10000001
	},
	{
		0b01111110,
		0b10000001 //I
	},
	{
		0b00110000, //J
		0b01000000,
		0b00111110,
		0b10000001
	},
	{
		0b01111110, //K
		0b00011000,
		0b01100110,
		0b10000001
	},
	{
		0b01111110, //L
		0b01000000,
		0b01000000,
		0b10000001
	},
	{
		0b01111110, //M
		0b00001100,
		0b00010000,
		0b00001100,
		0b01111110,
		0b10000001
	},
	{
		0b01111110, //N
		0b00000100,
		0b00011000,
		0b00100000,
		0b01111110,
		0b10000001
	},
	{
		0b00111100, //O
		0b01000010,
		0b01000010,
		0b01000010,
		0b00111100,
		0b10000001
	},
	{
		0b01111110, //P
		0b00010010,
		0b00010010,
		0b00001100,
		0b10000001
	},
	{
		0b00011000, //Q
		0b00100100,
		0b01000010,
		0b01010010,
		0b00110100,
		0b01011000,
		0b10000001
	},
	{
		0b01111110, //R
		0b00011010,
		0b01100100,
		0b10000001
	},
	{
		0b00100100, //S
		0b01001010,
		0b00110010,
		0b10000001
	},
	{
		0b00000010, //T
		0b01111110,
		0b00000010,
		0b10000001
	},
	{
		0b00111110, //U
		0b01000000,
		0b01000000,
		0b00111110,
		0b10000001
	},
	{
		0b00000110, //V
		0b00111000,
		0b01000000,
		0b00111000,
		0b00000110,
		0b10000001
	},
	{
		0b00011110, //W
		0b01100000,
		0b00011100,
		0b01100000,
		0b00011110,
		0b10000001
	},
	{
		0b01000010, //X
		0b00100100,
		0b00011000,
		0b00100100,
		0b01000010,
		0b10000001
	},
	{
		0b00000010, //Y
		0b00001100,
		0b01110000,
		0b00001100,
		0b00000010,
		0b10000001
	},
	{
		0b01000010, //Z
		0b01000110,
		0b01011010,
		0b01100010,
		0b10000001
	},
	{
		0b01100000, //Æ
		0b00011100,
		0b00001010,
		0b01111110,
		0b01001010,
		0b01001010,
		0b10000001
	},
	{
		0b00011010, //Ø
		0b00100100,
		0b01001010,
		0b01010010,
		0b00100100,
		0b01011000,
		0b10000001
	},
	{
		0b01000000, //Å
		0b00110010,
		0b00101101,
		0b00110010,
		0b01000000,
		0b10000001
	}
};

const uint8_t abc[29][7] PROGMEM = {
	{
		0b00110010, //a
		0b01001010,
		0b01111100,
		0b10000001
	},
	{
		0b01111110, //b
		0b01001000,
		0b00110000,
		0b10000001
	},
	{
		0b00111000, //c
		0b01000100,
		0b01000100,
		0b10000001
	},
	{
		0b00110000, //d
		0b01001000,
		0b01111110,
		0b10000001
	},
	{
		0b00111000, //e
		0b01010100,
		0b00101000,
		0b10000001
	},
	{
		0b00001000, //f
		0b01111100,
		0b00001010,
		0b10000001
	},
	{
		0b01000100, //g
		0b01001010,
		0b00111100,
		0b10000001
	},
	{
		0b01111110, //h
		0b00001000,
		0b01110000,
		0b10000001
	},
	{
		0b01001000, //i
		0b01111010,
		0b01000000,
		0b10000001
	},
	{
		0b01001000, //j
		0b01001010,
		0b00111010,
		0b10000001
	},
	{
		0b01111110, //k
		0b00010000,
		0b01101000,
		0b10000001
	},
	{
		0b00000010, //l
		0b00111110,
		0b01000000,
		0b10000001
	},
	{
		0b01111100, //m
		0b00000100,
		0b01111000,
		0b00000100,
		0b01111000,
		0b10000001
	},
	{
		0b01111100, //n
		0b00000100,
		0b01111000,
		0b10000001
	},
	{
		0b00111000, //o
		0b01000100,
		0b01000100,
		0b00111000,
		0b10000001
	},
	{
		0b01111110, //p
		0b00010010,
		0b00001100,
		0b10000001
	},
	{
		0b00001000, //q
		0b00010100,
		0b01111110,
		0b10000001
	},
	{
		0b01111110, //r
		0b00000100,
		0b00000010,
		0b10000001
	},
	{
		0b01001000, //s
		0b01010100,
		0b00100100,
		0b10000001
	},
	{
		0b00000100, //t
		0b00111110,
		0b01000100,
		0b10000001
	},
	{
		0b00111100, //u
		0b01000000,
		0b00100000,
		0b01111100,
		0b10000001
	},
	{
		0b00011100, //v
		0b01100000,
		0b00011100,
		0b10000001
	},
	{
		0b00011100, //w
		0b01100000,
		0b00010000,
		0b01100000,
		0b00011100,
		0b10000001
	},
	{
		0b01101100, //x
		0b00010000,
		0b01101100,
		0b10000001
	},
	{
		0b00001100, //y
		0b01010000,
		0b00111000,
		0b00000100,
		0b10000001
	},
	{
		0b01000100, //z
		0b01001100,
		0b01010100,
		0b01100100,
		0b10000001
	},
	{
		0b00110010, //æ
		0b01001010,
		0b00111100,
		0b01001010,
		0b00100100,
		0b10000001
	},
	{
		0b01110000, //ø
		0b01101000,
		0b01011000,
		0b00110100,
		0b10000001
	
	},
	{
		0b00100100, //å
		0b01010110,
		0b01111101,
		0b00000010,
		0b10000001
	}
};

const uint8_t num[10][5] PROGMEM = {
	{
		0b00111100, //0
		0b01000010,
		0b01000010,
		0b00111100,
		0b10000001
	},
	{
		0b01000100, //1
		0b01111110,
		0b01000000,
		0b10000001
	},
	{
		0b01000100, //2
		0b01100010,
		0b01011010,
		0b01000100,
		0b10000001
	},
	{
		0b01000010, //3
		0b01001010,
		0b00110100,
		0b10000001
	},
	{
		0b00000110, //4
		0b00001000,
		0b01111110,
		0b10000001
	},
	{
		0b00101110, //5
		0b01001010,
		0b00110010,
		0b10000001
	},
	{
		0b00111000, //6
		0b01010110,
		0b00100010,
		0b10000001
	},
	{
		0b00000010, //7
		0b01100010,
		0b00011010,
		0b00000110,
		0b10000001
	},
	{
		0b00110100, //8
		0b01001010,
		0b00110100,
		0b10000001
	},
	{
		0b01000100, //9
		0b01101010,
		0b00011100,
		0b10000001
	}
};

uint8_t specialVal[26] = {' ','.',',',':',';','/','!','?','^','_','-','+','=','(',')','[',']','{','}','#','*','%','|','~',0x27,0x22};

const uint8_t special[26][8] PROGMEM = {
	{
		0,0,0,129
	},
	{
		0b11000000, // punktum, .
		0b11000000,
		0b10000001
	},
	{
		0b10100000, // komma, ,
		0b01100000,
		0b10000001
	},
	{
		0b01100110,
		0b10000001 // kolon, :
	},
	{
		0b01010010, //semikolen, ;
		0b00110010,
		0b10000001
	},
	{
		0b01100000, // skråstrek, /
		0b00011000,
		0b00000110,
		0b10000001
	},
	{
		0b01011110,
		0b10000001 // utropstegn, !
	},
	{
		0b00000100, // spm.tegn, ?
		0b01010010,
		0b01001100,
		0b10000001
	},
	{
		0b00000100, // opphøgd, ^
		0b00000010,
		0b00000100,
		0b10000001
	},
	{
		0b01000000, // understrek, _
		0b01000000,
		0b01000000,
		0b10000001
	},
	{
		0b00010000, // bindestrek, -
		0b00010000,
		0b00010000,
		0b10000001
	},
	{
		0b00010000, //pluss, +
		0b00010000,
		0b01111100,
		0b00010000,
		0b00010000,
		0b10000001
	},
	{
		0b00100100, // erklik, =
		0b00100100,
		0b00100100,
		0b10000001
	},
	{
		0b00011000, // parantes start, (
		0b01100110,
		0b10000001
	},
	{
		0b01100110, // parantes slutt, )
		0b00011000,
		0b10000001
	},
	{
		0b01111110, // par2 start, [
		0b01000010,
		0b10000001
	},
	{
		0b01000010, // par2 slutt, ]
		0b01111110,
		0b10000001
	},
	{
		0b00011000, // klamme-par start {
		0b01100110,
		0b01000010,
		0b10000001
	},
	{
		0b01000010, // klamnme-par slutt }
		0b01100110,
		0b00011000,
		0b10000001
	},
	{
		0b00100000,
		0b01110100, // hashtag #
		0b00101110,
		0b00100100,
		0b01110100,
		0b00101110,
		0b00100100,
		0b10000001
	},
	{
		0b00100100, // stjerne *
		0b00011000,
		0b01111110,
		0b00011000,
		0b00100100,
		0b10000001
	},
	{
		0b0010010, // prosent %
		0b0001010,
		0b0100100,
		0b0100010,
		0b10000001
	},
	{
		0b11111111,
		0b10000001 // langstrek |
	},
	{
		0b00010000, // ~~~~
		0b00001000,
		0b00001000,
		0b00010000,
		0b00010000,
		0b00001000,
		0b10000001
	},
	{
		0b00000100, // "
		0b00000010,
		0b00000100,
		0b00000010,
		0b10000001
	},
	{
		0b00000110,
		0b10000001 // '
	}


};

uint8_t load_bitmap(uint8_t bitmap, volatile uint8_t * buffer, uint8_t position, uint8_t invert) {
	// loads bitmap: 0 = ABC, 1 = abc, 2 = NUM, 3 = Special
	// buffer is where to put the char
	// position is the position of the char to load

	uint8_t ch_size = 0;
	const uint8_t * bitmapptr = &ABC[position][0];

	switch (bitmap) {
		case 0: 
			ch_size = ABC_CHAR_SIZE;
			break;

		case 1:
			ch_size = abc_CHAR_SIZE;
			bitmapptr = &abc[position][0];
			break;
		
		case 2:
			ch_size = NUM_CHAR_SIZE;
			bitmapptr = &num[position][0];
			break;
		
		case 3:
			ch_size = SPECIAL_CHAR_SIZE;
			bitmapptr = &special[position][0];
			break;

		default:
			return 0;
			break;
	}
	uint8_t line = 0, i = 0;

	if (invert) {
		while ((line != 0b10000001) && (i < ch_size )) {
			line = pgm_read_byte(&bitmapptr[i]);
			buffer[i] = ~line;
			i++;
		}
		buffer[i-1] = 0xFF;
	} else {
		while ((line != 0b10000001) && (i < ch_size )) {
			line = pgm_read_byte(&bitmapptr[i]);
			buffer[i] = line;
			i++;
			
		}
		buffer[i-1] = 0x00;
	}
	
	

	 

	return i;
}
#endif
